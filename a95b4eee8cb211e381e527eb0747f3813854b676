{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f62c8717_61995379",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13648
      },
      "writtenOn": "2024-01-19T23:58:41Z",
      "side": 1,
      "message": "@Luca, any other idea here? Luk suggested to try AIBinder_getCallingSid() and check if ret of that !\u003d null and equals u:r:system_app:s0. The problem is that in the device where I tested it runs kernel 4.9 and possibly it doesn\u0027t support that call since it returns null (https://android.googlesource.com/platform/frameworks/native/+/refs/heads/main/libs/binder/ndk/include_platform/android/binder_ibinder_platform.h#38).",
      "revId": "a95b4eee8cb211e381e527eb0747f3813854b676",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1475a758_b1807900",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25732
      },
      "writtenOn": "2024-01-20T11:01:59Z",
      "side": 1,
      "message": "Can we move 1001000 to a constant variable?",
      "revId": "a95b4eee8cb211e381e527eb0747f3813854b676",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e820f5e_21ee38e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13648
      },
      "writtenOn": "2024-01-20T11:07:10Z",
      "side": 1,
      "message": "Yes, do you have a naming suggestion?",
      "parentUuid": "1475a758_b1807900",
      "revId": "a95b4eee8cb211e381e527eb0747f3813854b676",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1abd885_7f8169f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11883
      },
      "writtenOn": "2024-01-20T11:14:06Z",
      "side": 1,
      "message": "we can start by checking if we\u0027re automotive\n\n\u0027\nstatic bool isAutomotive() {\n    sp\u003cIServiceManager\u003e serviceManager \u003d defaultServiceManager();\n    if (serviceManager.get() \u003d\u003d nullptr) {\n        ALOGE(\"%s: unable to access native ServiceManager\", __func__);\n        return false;\n    }\n\n    sp\u003ccontent::pm::IPackageManagerNative\u003e packageManager;\n    sp\u003cIBinder\u003e binder \u003d serviceManager-\u003ewaitForService(String16(\"package_native\"));\n    packageManager \u003d interface_cast\u003ccontent::pm::IPackageManagerNative\u003e(binder);\n    if (packageManager \u003d\u003d nullptr) {\n        ALOGE(\"%s: unable to access native PackageManager\", __func__);\n        return false;\n    }\n\n    bool isAutomotive \u003d false;\n    binder::Status status \u003d\n        packageManager-\u003ehasSystemFeature(String16(\"android.hardware.type.automotive\"), 0,\n                                         \u0026isAutomotive);\n    if (!status.isOk()) {\n        ALOGE(\"%s: hasSystemFeature failed: %s\", __func__, status.exceptionMessage().c_str());\n        return false;\n    }\n\n    return isAutomotive;\n}\n\u0027\n\n\u0027\nuserid_t multiuser_get_user_id(uid_t uid) {\n    return uid / AID_USER_OFFSET;\n}\n\u0027\n\n#define AUTOMOTIVE_ADMIN_ID 10\n\nif multiuser_get_user_id(uid) \u003d\u003d AUTOMOTIVE_ADMIN_ID \u0026\u0026 isAutomotive() then allow?",
      "parentUuid": "f62c8717_61995379",
      "revId": "a95b4eee8cb211e381e527eb0747f3813854b676",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8225d8a4_b41a44a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25732
      },
      "writtenOn": "2024-01-20T11:19:16Z",
      "side": 1,
      "message": "Mhh, looking at it it looks like you should use `multiuser_get_app_id(uid)` from `\u003ccutils/multiuser.h\u003e`, you should be able to get a known service ID, but not sure if this would allow a secondary user on a regular device to control adb_root",
      "parentUuid": "5e820f5e_21ee38e8",
      "revId": "a95b4eee8cb211e381e527eb0747f3813854b676",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    }
  ]
}